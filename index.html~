<!DOCTYPE html>
<html lang="cs">
<head>
    <meta charset="UTF-8">
    <title>Mapa Zákazníků</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        body {
            display: flex;
            margin: 0;
            height: 100vh;
        }
        #map {
            width: 40%;
            height: 100%;
        }
        #info {
            width: 60%;
            height: 100%;
            background-color: white;
            padding: 20px;
            overflow-y: auto;
        }
        #divider {
            width: 5px; /* Šířka divideru */
            cursor: ew-resize; /* Změna kurzoru při najetí myši */
            background: #ccc; /* Barva divideru */
            height: 100%;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            font-size: 12px;
            font-family: Arial, sans-serif;
        }
        .tabulka-pro-plan-header {
            height: 20px;
        }
        .tabulka-pro-plan-header th {
            padding: 0;
            text-align: center;
            position: sticky;
            top: 0;
            background-color: black;
            color: white;
            z-index: 10;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 2px;
        }
        th {
            background-color: #f2f2f2;
        }
        .depo {
            color: red; /* Barva pro DEPO */
        }
        button {
            margin-top: 20px;
            padding: 10px 15px;
        }
        .summary {
            font-weight: bold;
            background-color: #e9e9e9;
        }
        .data-scroll {
            max-height: 250px;
            overflow-y: auto;
            margin-bottom: 20px;
        }
        .vsedni {
            background-color: #E6F7FF;
        }
        .sobota {
            background-color: #E3F6E3;
        }
        .nedela {
            background-color: #FFE4B3;
        }
    </style>
</head>
<body>
    <div id="map"></div>
    <div id="divider"></div> <!-- Posuvník -->
    <div id="info">
        <div>
            <label for="vykladkaSelect">Vykladka:</label>
            <select id="vykladkaSelect">
                <option value="all">Všechny</option>
                <option value="1. závoz">1. závoz</option>
                <option value="2. závoz">2. závoz</option>
                <option value="3. závoz">3. závoz</option>
            </select>
        </div>
        <div>
            <label for="denSelect">Den:</label>
            <select id="denSelect">
                <option value="all">Všechny</option>
                <!-- Možnost hodnôt pro dny se dynamicky přidá -->
            </select>
        </div>

        <!-- Tabulka pro všechna data -->
        <div class="data-scroll">
            <table id="allDataTable">
                <thead>
                    <tr class="tabulka-pro-plan-header">
                        <th>SAP</th>
                        <th>Zakaznik</th>
                        <th>Trasa</th>
                        <th>NazevCesty</th>
                        <th>Okno</th>
                        <th>Od</th>
                        <th>Do</th>
                        <th>Prepravek</th>
                        <th>Cas_vykladky</th>
                        <th>Vykladka</th>
                        <th>Den</th>
                        <th>Latitude</th>
                        <th>Longitude</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Tělo tabulky naplníme pomocí JavaScriptu -->
                </tbody>
            </table>
        </div>

        <!-- Tabulka pro vybrané zákazníky -->
        <table id="customerTable">
            <thead>
                <tr class="tabulka-pro-plan-header">
                    <th>SAP</th>
                    <th>Zakaznik</th>
                    <th>Trasa</th>
                    <th>NazevCesty</th>
                    <th>Okno</th>
                    <th>Od</th>
                    <th>Do</th>
                    <th>Prepravek</th>
                    <th>Cas_vykladky</th>
                    <th>Vykladka</th>
                    <th>Den</th>
                    <th>Latitude</th>
                    <th>Longitude</th>
                </tr>
            </thead>
            <tbody>
                <tr class="depo" data-name="DEPO">
                    <td>DEPO</td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>00:01 - 23:59</td>
                    <td>00:01</td>
                    <td>23:59</td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>49.9696583</td>
                    <td>14.5732181</td>
                </tr>
                <tr class="depo" data-name="DEPO">
                    <td>DEPO</td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>00:01 - 23:59</td>
                    <td>00:01</td>
                    <td>23:59</td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td>49.9696583</td>
                    <td>14.5732181</td>
                </tr>
            </tbody>
            <tfoot>
                <tr class="summary">
                    <td id="totalCustomers">Zákazníků: 0</td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td id="totalCount">Suma: 0</td>
                </tr>
            </tfoot>
        </table>
        <button id="createRouteButton">Vytvoř trasu</button>
        <button id="deleteRouteButton">Smaž trasu</button>
        <button id="clearDataButton">Vymazat vybrané záznamy</button>
        <table id="routeSummary" style="margin-top: 20px;">
            <thead>
                <tr>
                    <th>Navštívený zákazník</th>
                    <th>Vzdálenost (km)</th>
                    <th>Doba trvání (min)</th>
                </tr>
            </thead>
            <tbody id="summaryTableBody">
                <!-- Přehled tras zde -->
            </tbody>
            <tfoot class="summary">
                <tr>
                    <td>Celková vzdálenost: <span id="totalDistance">0</span> km</td>
                    <td>Celkový čas: <span id="totalDuration">0</span> min</td>
                </tr>
            </tfoot>
        </table>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // Inicializace mapy
        const map = L.map('map').setView([49.9696583, 14.5732181], 9);
        const customerTableBody = document.getElementById('customerTable').getElementsByTagName('tbody')[0];
        const allDataTableBody = document.getElementById('allDataTable').getElementsByTagName('tbody')[0];
        const summaryTableBody = document.getElementById('summaryTableBody');
        const addedCustomers = new Set(); // Sada pro uložení záznamů, které byly přidány
        let polyline;
        let customerMarkers = []; // Pro uložení značek zákazníků
        let uniqueDays = new Set(); // Sada pro unikátní dny

        // Přidání OpenStreetMap vrstvy
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap'
        }).addTo(map);

        // Načtení dat
        fetch('Herink_objednavky_leden.json')
            .then(response => response.json())
            .then(data => {
                data.forEach(zakaznik => {
                    const marker = createMarker(zakaznik);
                    marker.zakaznik = zakaznik;

                    customerMarkers.push(marker); // Přidání značky do pole
                    uniqueDays.add(zakaznik.Den); // Přidání unikátního dne do sady
                    addRowToAllDataTable(zakaznik); // Naplnění tabulky

                    // Přidání popup s informacemi
                    const popupContent = `
                        <strong>Zakaznik:</strong> ${zakaznik.Zakaznik}<br>
                        <strong>Trasa:</strong> ${zakaznik.Trasa}<br>
                        <strong>Okno:</strong> ${zakaznik.Okno}
                    `;
                    marker.bindPopup(popupContent);

                    marker.on('mouseover', function() {
                        this.openPopup();
                    });
                    marker.on('mouseout', function() {
                        this.closePopup();
                    });

                    marker.on('click', () => {
                        toggleCustomerInTable(marker); // Přidání zákazníka do tabulky při kliknutí na značku
                    });

                    marker.addTo(map); // Přidání značky na mapu
                });

                populateDayOptions(); // Dynamické naplnění výběru pro dny
                updateMapMarkers(); // Inicializace mapy se značkami
            })
            .catch(error => console.error('Chyba při načítání dat:', error));

        // Vytvoření značky jako kroužku
        function createMarker(zakaznik) {
            return L.circleMarker([zakaznik.Latitude, zakaznik.Longitude], {
                radius: 8,
                fillColor: 'blue',
                color: 'blue',
                weight: 1,
                opacity: 1,
                fillOpacity: 0.6
            });
        }

        // Přidání řádku do tabulky pro všechna data
        function addRowToAllDataTable(zakaznik) {
            const newRow = allDataTableBody.insertRow();
            newRow.setAttribute('data-name', zakaznik.Zakaznik);
            newRow.insertCell(0).innerText = zakaznik.SAP;
            newRow.insertCell(1).innerText = zakaznik.Zakaznik;
            newRow.insertCell(2).innerText = zakaznik.Trasa;
            newRow.insertCell(3).innerText = zakaznik.NazevCesty;
            newRow.insertCell(4).innerText = zakaznik.Okno;
            newRow.insertCell(5).innerText = zakaznik.Od;
            newRow.insertCell(6).innerText = zakaznik.Do;
            newRow.insertCell(7).innerText = zakaznik.Prepravek;
            newRow.insertCell(8).innerText = zakaznik.Cas_vykladky;
            newRow.insertCell(9).innerText = zakaznik.Vykladka;
            newRow.insertCell(10).innerText = zakaznik.Den;
            newRow.insertCell(11).innerText = zakaznik.Latitude;
            newRow.insertCell(12).innerText = zakaznik.Longitude;

            // Nastavení barvy pro řádek podle dne
            if (zakaznik.Den === "Všední") {
                newRow.classList.add('vsedni');
            } else if (zakaznik.Den === "Sobota") {
                newRow.classList.add('sobota');
            } else if (zakaznik.Den === "Neděle") {
                newRow.classList.add('nedela');
            }
        }

        // Přidání nebo odstranění zákazníka z tabulky
        function toggleCustomerInTable(marker) {
            const zakaznik = marker.zakaznik;
            const customerIdentifier = zakaznik.Zakaznik;

            if (addedCustomers.has(customerIdentifier)) {
                removeCustomerFromTable(customerIdentifier);
                addedCustomers.delete(customerIdentifier);
                marker.setStyle({ fillColor: 'blue', color: 'blue' });
            } else {
                addCustomerToTable(zakaznik);
                addedCustomers.add(customerIdentifier);
                marker.setStyle({ fillColor: 'red', color: 'red' });
            }
        }

        // Přidání zákazníka do tabulky
        function addCustomerToTable(zakaznik) {
            const newRow = customerTableBody.insertRow(1); // Vložení na druhé místo
            newRow.setAttribute('data-name', zakaznik.Zakaznik);
            newRow.insertCell(0).innerText = zakaznik.SAP;
            newRow.insertCell(1).innerText = zakaznik.Zakaznik;
            newRow.insertCell(2).innerText = zakaznik.Trasa;
            newRow.insertCell(3).innerText = zakaznik.NazevCesty;
            newRow.insertCell(4).innerText = zakaznik.Okno;
            newRow.insertCell(5).innerText = zakaznik.Od;
            newRow.insertCell(6).innerText = zakaznik.Do;
            newRow.insertCell(7).innerText = zakaznik.Prepravek;
            newRow.insertCell(8).innerText = zakaznik.Cas_vykladky;
            newRow.insertCell(9).innerText = zakaznik.Vykladka;
            newRow.insertCell(10).innerText = zakaznik.Den;
            newRow.insertCell(11).innerText = zakaznik.Latitude;
            newRow.insertCell(12).innerText = zakaznik.Longitude;
        }

        // Odstranění zákazníka z tabulky
        function removeCustomerFromTable(customerIdentifier) {
            const rows = customerTableBody.getElementsByTagName('tr');
            for (let i = 1; i < rows.length; i++) {
                if (rows[i].getAttribute('data-name') === customerIdentifier) {
                    customerTableBody.deleteRow(i);
                    break;
                }
            }
        }

        // Funkce pro smazání trasy
        document.getElementById('deleteRouteButton').addEventListener('click', () => {
            if (polyline) {
                map.removeLayer(polyline);
                polyline = null;
            } else {
                alert('Žádná trasa k odstranění!');
            }
        });

        // Funkce pro vymazání vybraných záznamů (kromě DEPO)
document.getElementById('clearDataButton').addEventListener('click', () => {
    const rows = customerTableBody.getElementsByTagName('tr');
    const rowCount = rows.length;

    for (let i = rowCount - 1; i >= 0; i--) {
        if (rows[i].cells[0].innerText !== 'DEPO') {
            const customerIdentifier = rows[i].getAttribute('data-name');
            removeCustomerFromTable(customerIdentifier);
        }
    }

    // Obnovení barev markerů
    resetMarkerColors();

    updateSummaries(); // Aktualizace souhrnů
});

// Obnovení barev markerů
function resetMarkerColors() {
    customerMarkers.forEach(marker => {
        marker.setStyle({ fillColor: 'blue', color: 'blue' }); // Výchozí barva markeru
    });
}

        // Funkce pro vytváření trasy
        document.getElementById('createRouteButton').addEventListener('click', () => {
            const routeWaypoints = [];
            const rows = customerTableBody.getElementsByTagName('tr');

            for (let i = 1; i < rows.length; i++) { // Začneme od 1 kvůli hlavičce tabulky
                const cells = rows[i].getElementsByTagName('td');
                if (cells.length > 0) {
                    const latitude = cells[11].innerText;
                    const longitude = cells[12].innerText;
                    routeWaypoints.push([longitude, latitude]);
                }
            }

            if (routeWaypoints.length < 2) {
                alert('Musíte přidat alespoň dva zákazníky pro vytvoření trasy.');
                return;
            }

            if (polyline) {
                map.removeLayer(polyline); // Odstranění předchozí trasy
            }

            const routeUrl = `https://router.project-osrm.org/route/v1/driving/${routeWaypoints.join(';')}?overview=full&geometries=geojson`;

            fetch(routeUrl)
                .then(response => response.json())
                .then(data => {
                    if (data.routes && data.routes.length > 0) {
                        const route = data.routes[0];
                        const routeGeoJSON = route.geometry;
                        polyline = L.polyline(L.GeoJSON.coordsToLatLngs(routeGeoJSON.coordinates, 0), { color: 'green' }).addTo(map);
                    } else {
                        alert('Nepodařilo se vytvořit trasu. Zkontrolujte souřadnice.');
                    }
                })
                .catch(error => {
                    console.error('Chyba při vytváření trasy:', error);
                });
        });

        // Dynamické změny rozměrů
        const divider = document.getElementById('divider');
        const container = document.body; // Tělo jako kontejner

        let isDragging = false;

        divider.addEventListener('mousedown', (e) => {
            isDragging = true;
            document.body.style.cursor = 'ew-resize'; // Změna kurzoru
        });

        document.addEventListener('mousemove', (e) => {
            if (isDragging) {
                const containerWidth = container.offsetWidth;
                const newWidthMap = (e.clientX / containerWidth) * 100; // Nová šířka v %
                const newWidthInfo = 100 - newWidthMap;

                // Nastavení nových šířek
                document.getElementById('map').style.width = `${newWidthMap}%`;
                document.getElementById('info').style.width = `${newWidthInfo}%`;
            }
        });

        document.addEventListener('mouseup', () => {
            isDragging = false;
            document.body.style.cursor = 'default'; // Obnovení kurzoru
        });
    </script>
</body>
</html>